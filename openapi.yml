openapi: 3.0.1
info:
  title: Swagger Petstore
  version: ''
paths:
  /pet/{petId}/uploadImage:
    post:
      description: ''
      operationId: pet_uploadFile
      tags:
        - Pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
          example: 1000000
          examples:
            Example1:
              value: 1000000
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                Example1:
                  value:
                    code: 1
                    type: type
                    message: message
      summary: uploads an image
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  description: Additional data to pass to server
                  type: string
                  nullable: true
                file:
                  type: string
                  format: binary
  /pet:
    post:
      description: ''
      operationId: pet_addPet
      tags:
        - Pet
      parameters: []
      responses:
        '204':
          description: ''
        '405':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Add a new pet to the store
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            examples:
              Example1:
                value:
                  name: doggie-example-value
                  photoUrls:
                    - photoUrls
    put:
      description: ''
      operationId: pet_updatePet
      tags:
        - Pet
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
        '405':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Update an existing pet
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            examples:
              Example1:
                value:
                  name: doggie-example-value
                  photoUrls:
                    - photoUrls
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: pet_findPetsByStatus
      tags:
        - Pet
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FindPetsByStatusRequestStatusItem'
              nullable: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Finds Pets by status
      security:
        - ApiKeyAuth: []
  /pet/findByTags:
    get:
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: pet_findPetsByTags
      tags:
        - Pet
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          schema:
            type: array
            items:
              type: string
              nullable: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Finds Pets by tags
      security:
        - ApiKeyAuth: []
  /pet/{petId}:
    get:
      description: Returns a single pet
      operationId: pet_getPetById
      tags:
        - Pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
          example: 1000000
          examples:
            Example1:
              value: 1000000
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                Example1:
                  value:
                    id: 1000000
                    category:
                      id: 1000000
                      name: name
                    name: doggie-example-value
                    photoUrls:
                      - photoUrls
                    tags:
                      - id: 1000000
                        name: name
                    status: available
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Find pet by ID
      security:
        - ApiKeyAuth: []
    post:
      description: ''
      operationId: pet_updatePetWithForm
      tags:
        - Pet
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
          example: 1000000
          examples:
            Example1:
              value: 1000000
      responses:
        '204':
          description: ''
        '405':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Updates a pet in the store with form data
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                  description: Updated name of the pet
                status:
                  type: string
                  nullable: true
                  description: Updated status of the pet
            examples:
              Example1:
                value: {}
    delete:
      description: ''
      operationId: pet_deletePet
      tags:
        - Pet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
          example: 1000000
          examples:
            Example1:
              value: 1000000
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Deletes a pet
      security:
        - ApiKeyAuth: []
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: store_getInventory
      tags:
        - Store
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
              examples:
                Example1:
                  value:
                    key: 1
      summary: Returns pet inventories by status
      security:
        - ApiKeyAuth: []
  /store/order:
    post:
      description: ''
      operationId: store_placeOrder
      tags:
        - Store
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                Example1:
                  value:
                    id: 1000000
                    petId: 1000000
                    quantity: 1
                    shipDate: '2024-01-15T09:30:00Z'
                    status: placed
                    complete: true
        '400':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Place an order for a pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              Example1:
                value: {}
  /store/order/{orderId}:
    get:
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: store_getOrderById
      tags:
        - Store
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
          example: 1000000
          examples:
            Example1:
              value: 1000000
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                Example1:
                  value:
                    id: 1000000
                    petId: 1000000
                    quantity: 1
                    shipDate: '2024-01-15T09:30:00Z'
                    status: placed
                    complete: true
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Find purchase order by ID
    delete:
      description: >-
        For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: store_deleteOrder
      tags:
        - Store
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
          example: 1000000
          examples:
            Example1:
              value: 1000000
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Delete purchase order by ID
  /user/createWithList:
    post:
      description: ''
      operationId: user_createUsersWithListInput
      tags:
        - User
      parameters: []
      responses:
        '204':
          description: ''
      summary: Creates list of users with given input array
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  - {}
  /user/{username}:
    get:
      description: ''
      operationId: user_getUserByName
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
          example: username
          examples:
            Example1:
              value: username
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Example1:
                  value:
                    id: 1000000
                    username: username
                    firstName: firstName
                    lastName: lastName
                    email: email
                    password: password
                    phone: phone
                    userStatus: 1
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Get user by user name
    put:
      description: This can only be done by the logged in user.
      operationId: user_updateUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
          example: username
          examples:
            Example1:
              value: username
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Updated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value: {}
    delete:
      description: This can only be done by the logged in user.
      operationId: user_deleteUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
          example: username
          examples:
            Example1:
              value: username
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema: {}
        '404':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Delete user
  /user/login:
    get:
      description: ''
      operationId: user_loginUser
      tags:
        - User
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
          example: username
          examples:
            Example1:
              value: username
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
          example: password
          examples:
            Example1:
              value: password
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
              examples:
                Example1:
                  value: string
        '400':
          description: ''
          content:
            application/json:
              schema: {}
      summary: Logs user into the system
  /user/logout:
    get:
      description: ''
      operationId: user_logoutUser
      tags:
        - User
      parameters: []
      responses:
        '204':
          description: ''
      summary: Logs out current logged in user session
  /user/createWithArray:
    post:
      description: ''
      operationId: user_createUsersWithArrayInput
      tags:
        - User
      parameters: []
      responses:
        '204':
          description: ''
      summary: Creates list of users with given input array
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  - {}
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: user_createUser
      tags:
        - User
      parameters: []
      responses:
        '204':
          description: ''
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value: {}
components:
  schemas:
    FindPetsByStatusRequestStatusItem:
      title: FindPetsByStatusRequestStatusItem
      type: string
      enum:
        - available
        - pending
        - sold
    OauthScope:
      title: OauthScope
      type: string
      enum:
        - read:pets
        - write:pets
    ApiResponse:
      title: ApiResponse
      type: object
      properties:
        code:
          type: integer
          nullable: true
        type:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
    Category:
      title: Category
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
          nullable: true
    PetStatus:
      title: PetStatus
      type: string
      enum:
        - available
        - pending
        - sold
      description: pet status in the store
    Pet:
      title: Pet
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/Category'
          nullable: true
        name:
          type: string
          example: doggie-example-value
        photoUrls:
          type: array
          items:
            type: string
          example:
            - photoUrls
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          nullable: true
        status:
          $ref: '#/components/schemas/PetStatus'
          nullable: true
          description: pet status in the store
      required:
        - name
        - photoUrls
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
          nullable: true
    OrderStatus:
      title: OrderStatus
      type: string
      enum:
        - placed
        - approved
        - delivered
      description: Order Status
    Order:
      title: Order
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        petId:
          type: integer
          format: int64
          nullable: true
        quantity:
          type: integer
          nullable: true
        shipDate:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatus'
          nullable: true
          description: Order Status
        complete:
          type: boolean
          nullable: true
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        username:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        userStatus:
          type: integer
          nullable: true
          description: User Status
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api_key
